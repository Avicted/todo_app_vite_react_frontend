import { test, expect } from '@playwright/test';

/* test.beforeEach(async ({ page }) => {
    // Runs before each test and signs in each page.
    await page.goto('http://localhost:5173/authentication/login');

    // Fill the form
    await page.fill('input[name="email"]', `tester@test.tld` );
    await page.fill('input[name="password"]', 'password123');

    // Submit the form
    await page.click('button[type="submit"]');
});*/

// --- TodoItems.spec.ts ---
test.describe.serial('Todo Item Flow', () => {
    test('Create a new Todo Item', async ({ page }) => {    
        // Login with known user
        await page.goto('http://localhost:5173/authentication/login');

        // Fill the form
        await page.fill('input[name="email"]', `tester@test.tld` );
        await page.fill('input[name="password"]', 'password123');

        // Submit the form
        await page.click('button[type="submit"]');

        // wait for the page to load
        await page.waitForLoadState('networkidle');
        // ---------------------------------------------------------------------


        await page.goto('http://localhost:5173/todos');

        await page.click('#create-todo-item-button');

        // Fill the form
        const expectedTodoItemName = `Test Todo Item created by Playwright ${new Date().getTime()}`;
        await page.fill('input[name="name"]', expectedTodoItemName);

        await page.fill('textarea[name="description"]', 'This is a test todo item description generated by Playwright automatically :)');

        // Choose a type, 0 = Not Started, 1 = In Progress, 2 = Completed
        await page.selectOption('select[id="status"]', '1');

        // Submit the form
        await page.click('button[name="submit"]');

        // wait for the page to load
        await page.waitForLoadState('networkidle');

        // Expect the page to have the new todo item expectedTodoItemName
        await expect(page.locator('ul')).toContainText(expectedTodoItemName);
    });

    //  Update a Todo Item
    test('Update a Todo Item', async ({ page }) => {
        // Login with known user
        await page.goto('http://localhost:5173/authentication/login');

        // Fill the form
        await page.fill('input[name="email"]', `tester@test.tld` );
        await page.fill('input[name="password"]', 'password123');

        // Submit the form
        await page.click('button[type="submit"]');

        // wait for the page to load
        await page.waitForLoadState('networkidle');
        // ---------------------------------------------------------------------

        await page.goto('http://localhost:5173/todos');

        // Click the first todo items update button
        // Find the button with name="update" in the ul list
        await page.locator('ul >> li').first().locator('button[name="update"]').click();

        // Update all fields
        const expectedTodoItemName = `Test Todo Item updated by Playwright ${new Date().getTime()}`;
        await page.fill('input[name="name"]', expectedTodoItemName);

        await page.fill('textarea[name="description"]', 'This is a test todo item description updated by Playwright automatically :)');

        // Choose a type
        await page.selectOption('select[id="status"]', '0');

        // Submit the form
        await page.click('button[name="update-item"]');

        // wait for the page to load
        await page.waitForLoadState('networkidle');

        // Expect the page to have the new todo item expectedTodoItemName
        await expect(page.locator('ul')).toContainText(expectedTodoItemName);
    });

    // Remove a Todo Item
    test('Remove a Todo Item', async ({ page }) => {
        // Login with known user
        await page.goto('http://localhost:5173/authentication/login');

        // Fill the form
        await page.fill('input[name="email"]', `tester@test.tld` );
        await page.fill('input[name="password"]', 'password123');

        // Submit the form
        await page.click('button[type="submit"]');

        // wait for the page to load
        await page.waitForLoadState('networkidle');
        // ---------------------------------------------------------------------

        await page.goto('http://localhost:5173/todos');

        await page.waitForLoadState('networkidle');

        // Check if there are any todo items, by searching for the ul list
        const ulLocator = page.locator('ul');
        const ulExists = await ulLocator.isVisible();

        if (ulExists)
        {
            const todoItemsCount = await (page.locator('ul >> li')).count();
    
            // Click the first todo items remove button
            // Find the button with name="remove" in the ul list
            await page.locator('ul >> li').first().locator('button[name="remove"]').click();
    
            await page.waitForLoadState('networkidle');

            await page.waitForTimeout(1000);
    
            // Get the number of todo items after removing
            const todoItemsCountAfterRemove = await (page.locator('ul >> li')).count();
    
            // Expect the page to have one less todo item or 0 if there were no todo items
            if (todoItemsCount === 0) {
                expect(todoItemsCountAfterRemove).toBe(0);
              } else {
                expect(todoItemsCountAfterRemove).toBe(todoItemsCount - 1);
            }
        }
    });

})